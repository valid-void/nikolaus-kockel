/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type InsertGallery = {
  _type: "insertGallery";
  insertGallery?: boolean;
};

export type Taxonomy = {
  _type: "taxonomy";
  year?: string;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
};

export type EventList = {
  _type: "eventList";
  eventCategory?: "present" | "future" | "past";
  colors?: ColoredSection;
};

export type ProjectList = {
  _type: "projectList";
  showAllProjects?: boolean;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
};

export type StyledImage = {
  _type: "styledImage";
  imagePosition?: "left" | "full" | "right";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type DocumentContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & StyledImage | {
  _key: string;
} & ProjectList | {
  _key: string;
} & EventList | {
  _key: string;
} & InsertGallery>;

export type SimpleBlock = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Navigation = {
  _type: "navigation";
  menu?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Slug;
};

export type ColorTag = {
  _id: string;
  _type: "colorTag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  color?: Color;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type WebsiteInfo = {
  _id: string;
  _type: "websiteInfo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  author?: string;
  colors?: ColoredSection;
  homepage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  menu?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
  footer?: Array<{
    title?: string;
    url?: string;
    _type: "link";
    _key: string;
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "page";
  }>;
  bgColor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "event";
  };
  meta?: Array<{
    _key: string;
  } & InternationalizedArraySimpleBlockValue>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: Array<{
      _key: string;
    } & InternationalizedArrayStringValue>;
    metadataBase?: string;
    _type: "image";
  };
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date?: EventDates;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Slug;
  previewImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  authors?: Array<string>;
  keywords?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArraySimpleBlockValue>;
  main?: Array<{
    _key: string;
  } & InternationalizedArrayDocumentContentValue>;
  colors?: ColoredSection;
};

export type EventDates = {
  _type: "eventDates";
  start?: string;
  end?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  year?: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Slug;
  previewImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  authors?: Array<string>;
  keywords?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArraySimpleBlockValue>;
  main?: Array<{
    _key: string;
  } & InternationalizedArrayDocumentContentValue>;
  colors?: ColoredSection;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  slug?: Slug;
  previewImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  authors?: Array<string>;
  keywords?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArraySimpleBlockValue>;
  main?: Array<{
    _key: string;
  } & InternationalizedArrayDocumentContentValue>;
  colors?: ColoredSection;
};

export type ColoredSection = {
  _type: "coloredSection";
  bgColor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "colorTag";
  };
  textColor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "colorTag";
  };
};

export type InternationalizedArraySimpleBlockValue = {
  _type: "internationalizedArraySimpleBlockValue";
  value?: SimpleBlock;
};

export type InternationalizedArrayDocumentContentValue = {
  _type: "internationalizedArrayDocumentContentValue";
  value?: DocumentContent;
};

export type InternationalizedArrayTextValue = {
  _type: "internationalizedArrayTextValue";
  value?: string;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArraySimpleBlock = Array<{
  _key: string;
} & InternationalizedArraySimpleBlockValue>;

export type InternationalizedArrayDocumentContent = Array<{
  _key: string;
} & InternationalizedArrayDocumentContentValue>;

export type InternationalizedArrayText = Array<{
  _key: string;
} & InternationalizedArrayTextValue>;

export type InternationalizedArrayString = Array<{
  _key: string;
} & InternationalizedArrayStringValue>;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = InsertGallery | Taxonomy | EventList | ProjectList | StyledImage | DocumentContent | SimpleBlock | Navigation | Category | ColorTag | Post | Author | WebsiteInfo | Event | EventDates | Project | Page | ColoredSection | InternationalizedArraySimpleBlockValue | InternationalizedArrayDocumentContentValue | InternationalizedArrayTextValue | InternationalizedArrayStringValue | InternationalizedArraySimpleBlock | InternationalizedArrayDocumentContent | InternationalizedArrayText | InternationalizedArrayString | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: websiteInfoQuery
// Query: *[_type == "websiteInfo"][0] {  ...,  footer[]{    _type == "link" => {      "title": title,      "link": url    },    _type == "page" => {      "title": @->title[_key == $locale][0].value,      "link": @->slug.current    }  },  menu[]->{    'title': title[_key == $locale][0].value,     'slug': slug.current   },  homepage->{    'title': title[_key == $locale][0].value,     'slug': slug.current   },  'description': meta[_key == $locale][0].value,   'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},}
export type WebsiteInfoQueryResult = {
  _id: string;
  _type: "websiteInfo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  author?: string;
  colors: {
    bgColor: {
      color: Color | null;
    } | null;
    textColor: {
      color: Color | null;
    } | null;
  } | null;
  homepage: {
    title: string | null;
    slug: string | null;
  } | null;
  menu: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  footer: Array<{} | {
    title: string | null;
    link: string | null;
  }> | null;
  bgColor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "event";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
  meta?: Array<{
    _key: string;
  } & InternationalizedArraySimpleBlockValue>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: Array<{
      _key: string;
    } & InternationalizedArrayStringValue>;
    metadataBase?: string;
    _type: "image";
  };
  description: SimpleBlock | null;
} | null;
// Variable: homepageQuery
// Query: *[_type == "websiteInfo"][0] {  'slug': homepage->slug.current,  'title': homepage->title[_key == $locale][0].value,  author,}
export type HomepageQueryResult = {
  slug: string | null;
  title: string | null;
  author: string | null;
} | null;
// Variable: getTitleBySlugs
// Query: *[_type in ["page", "project", "event", "category"] && slug.current == $slug] [] {    'title': title[_key == $locale][0].value,   }
export type GetTitleBySlugsResult = Array<{
  title: string | null;
}>;
// Variable: contentSlugs
// Query: *[_type in ["page", "project", "event", "category"] && defined(slug.current)]{"slug": slug.current}
export type ContentSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: contentQuery
// Query: *[_type in ["page", "project", "event"] && slug.current == $slug] [0] {    ...,    _id,    previewImage,    'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,    'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},    'main': main[_key == $locale][0].value[]{      ...,      'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},    },        'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,     category[]->{      'title': title[_key == $locale][0].value,       'slug': slug.current     },    'keywords': keywords[_key == $locale][0].value,     previewImage,    'slug': slug.current,    year,      'start': date.start,  'end': date.end  }
export type ContentQueryResult = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date?: EventDates;
  title: string | null;
  slug: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  authors?: Array<string>;
  keywords: string | null;
  description: SimpleBlock | null;
  main: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    colors: null;
  } | {
    _key: string;
    _type: "eventList";
    eventCategory?: "future" | "past" | "present";
    colors: {
      bgColor: {
        color: Color | null;
      } | null;
      textColor: {
        color: Color | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "insertGallery";
    insertGallery?: boolean;
    colors: null;
  } | {
    _key: string;
    _type: "projectList";
    showAllProjects?: boolean;
    category?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    colors: null;
  } | {
    _key: string;
    _type: "styledImage";
    imagePosition?: "full" | "left" | "right";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    colors: null;
  }> | null;
  colors: {
    bgColor: {
      color: Color | null;
    } | null;
    textColor: {
      color: Color | null;
    } | null;
  } | null;
  year: null;
  start: string | null;
  end: string | null;
} | {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  authors?: Array<string>;
  keywords: string | null;
  description: SimpleBlock | null;
  main: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    colors: null;
  } | {
    _key: string;
    _type: "eventList";
    eventCategory?: "future" | "past" | "present";
    colors: {
      bgColor: {
        color: Color | null;
      } | null;
      textColor: {
        color: Color | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "insertGallery";
    insertGallery?: boolean;
    colors: null;
  } | {
    _key: string;
    _type: "projectList";
    showAllProjects?: boolean;
    category?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    colors: null;
  } | {
    _key: string;
    _type: "styledImage";
    imagePosition?: "full" | "left" | "right";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    colors: null;
  }> | null;
  colors: {
    bgColor: {
      color: Color | null;
    } | null;
    textColor: {
      color: Color | null;
    } | null;
  } | null;
  year: null;
  start: null;
  end: null;
} | {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  year: string | null;
  title: string | null;
  slug: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  authors?: Array<string>;
  keywords: string | null;
  description: SimpleBlock | null;
  main: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    colors: null;
  } | {
    _key: string;
    _type: "eventList";
    eventCategory?: "future" | "past" | "present";
    colors: {
      bgColor: {
        color: Color | null;
      } | null;
      textColor: {
        color: Color | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "insertGallery";
    insertGallery?: boolean;
    colors: null;
  } | {
    _key: string;
    _type: "projectList";
    showAllProjects?: boolean;
    category?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    colors: null;
  } | {
    _key: string;
    _type: "styledImage";
    imagePosition?: "full" | "left" | "right";
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    colors: null;
  }> | null;
  colors: {
    bgColor: {
      color: Color | null;
    } | null;
    textColor: {
      color: Color | null;
    } | null;
  } | null;
  start: null;
  end: null;
} | null;
// Variable: projectListQuery
// Query: *[_type == "project"] | order(orderRank) {      'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,     category[]->{      'title': title[_key == $locale][0].value,       'slug': slug.current     },    'keywords': keywords[_key == $locale][0].value,     previewImage,    'slug': slug.current,    year,}
export type ProjectListQueryResult = Array<{
  title: string | null;
  description: SimpleBlock | null;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  keywords: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: string | null;
  year: string | null;
}>;
// Variable: eventOnGoing
// Query: *[_type=='event' && date.start < now() && date.end > now()] {      'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,     category[]->{      'title': title[_key == $locale][0].value,       'slug': slug.current     },    'keywords': keywords[_key == $locale][0].value,     previewImage,    'slug': slug.current,    year,    'start': date.start,  'end': date.end}
export type EventOnGoingResult = Array<{
  title: string | null;
  description: SimpleBlock | null;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  keywords: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: string | null;
  year: null;
  start: string | null;
  end: string | null;
}>;
// Variable: eventInFuture
// Query: *[_type=='event' && date.start > now()] {      'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,     category[]->{      'title': title[_key == $locale][0].value,       'slug': slug.current     },    'keywords': keywords[_key == $locale][0].value,     previewImage,    'slug': slug.current,    year,    'start': date.start,  'end': date.end}
export type EventInFutureResult = Array<{
  title: string | null;
  description: SimpleBlock | null;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  keywords: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: string | null;
  year: null;
  start: string | null;
  end: string | null;
}>;
// Variable: eventInPast
// Query: *[_type=='event' && date.end < now()] {      'title': title[_key == $locale][0].value,     'description': description[_key == $locale][0].value,     category[]->{      'title': title[_key == $locale][0].value,       'slug': slug.current     },    'keywords': keywords[_key == $locale][0].value,     previewImage,    'slug': slug.current,    year,    'start': date.start,  'end': date.end}
export type EventInPastResult = Array<{
  title: string | null;
  description: SimpleBlock | null;
  category: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  keywords: string | null;
  previewImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: string | null;
  year: null;
  start: string | null;
  end: string | null;
}>;
// Variable: galleryQuery
// Query: *[_type in ["page", "project", "event"] && slug.current == $slug] [0] {  gallery}
export type GalleryQueryResult = {
  gallery: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
} | null;
// Variable: heroQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),   "title": coalesce(title[_key == "de"][0].value, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type HeroQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: moreStoriesQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),   "title": coalesce(title[_key == "de"][0].value, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type MoreStoriesQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),   "title": coalesce(title[_key == "de"][0].value, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"websiteInfo\"][0] {\n  ...,\n  footer[]{\n    _type == \"link\" => {\n      \"title\": title,\n      \"link\": url\n    },\n    _type == \"page\" => {\n      \"title\": @->title[_key == $locale][0].value,\n      \"link\": @->slug.current\n    }\n  },\n  menu[]->{\n    'title': title[_key == $locale][0].value, \n    'slug': slug.current \n  },\n  homepage->{\n    'title': title[_key == $locale][0].value, \n    'slug': slug.current \n  },\n  'description': meta[_key == $locale][0].value, \n  'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},\n}": WebsiteInfoQueryResult;
    "*[_type == \"websiteInfo\"][0] {\n  'slug': homepage->slug.current,\n  'title': homepage->title[_key == $locale][0].value,\n  author,\n}": HomepageQueryResult;
    "*[_type in [\"page\", \"project\", \"event\", \"category\"] && slug.current == $slug] [] {\n    'title': title[_key == $locale][0].value, \n  }": GetTitleBySlugsResult;
    "*[_type in [\"page\", \"project\", \"event\", \"category\"] && defined(slug.current)]{\"slug\": slug.current}": ContentSlugsResult;
    "*[_type in [\"page\", \"project\", \"event\"] && slug.current == $slug] [0] {\n    ...,\n    _id,\n    previewImage,\n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value,\n    'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},\n    'main': main[_key == $locale][0].value[]{\n      ...,\n      'colors': colors{ 'bgColor': bgColor->{color}, 'textColor': textColor->{color}},\n    },\n    \n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value, \n    category[]->{\n      'title': title[_key == $locale][0].value, \n      'slug': slug.current \n    },\n    'keywords': keywords[_key == $locale][0].value, \n    previewImage,\n    'slug': slug.current,\n    year\n,\n    \n  'start': date.start,\n  'end': date.end\n\n  }\n": ContentQueryResult;
    "*[_type == \"project\"] | order(orderRank) {\n  \n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value, \n    category[]->{\n      'title': title[_key == $locale][0].value, \n      'slug': slug.current \n    },\n    'keywords': keywords[_key == $locale][0].value, \n    previewImage,\n    'slug': slug.current,\n    year\n,\n}": ProjectListQueryResult;
    "*[_type=='event' && date.start < now() && date.end > now()] {\n  \n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value, \n    category[]->{\n      'title': title[_key == $locale][0].value, \n      'slug': slug.current \n    },\n    'keywords': keywords[_key == $locale][0].value, \n    previewImage,\n    'slug': slug.current,\n    year\n,\n  \n  'start': date.start,\n  'end': date.end\n\n}": EventOnGoingResult;
    "*[_type=='event' && date.start > now()] {\n  \n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value, \n    category[]->{\n      'title': title[_key == $locale][0].value, \n      'slug': slug.current \n    },\n    'keywords': keywords[_key == $locale][0].value, \n    previewImage,\n    'slug': slug.current,\n    year\n,\n  \n  'start': date.start,\n  'end': date.end\n\n}": EventInFutureResult;
    "*[_type=='event' && date.end < now()] {\n  \n    'title': title[_key == $locale][0].value, \n    'description': description[_key == $locale][0].value, \n    category[]->{\n      'title': title[_key == $locale][0].value, \n      'slug': slug.current \n    },\n    'keywords': keywords[_key == $locale][0].value, \n    previewImage,\n    'slug': slug.current,\n    year\n,\n  \n  'start': date.start,\n  'end': date.end\n\n}": EventInPastResult;
    "*[_type in [\"page\", \"project\", \"event\"] && slug.current == $slug] [0] {\n  gallery\n}": GalleryQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {\n    content,\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n   \"title\": coalesce(title[_key == \"de\"][0].value, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n  }\n": HeroQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n   \"title\": coalesce(title[_key == \"de\"][0].value, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n  }\n": MoreStoriesQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content,\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n   \"title\": coalesce(title[_key == \"de\"][0].value, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\"name\": coalesce(name, \"Anonymous\"), picture},\n\n  }\n": PostQueryResult;
  }
}
